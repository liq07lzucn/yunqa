#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
from enaml.workbench.api import Extension, PluginManifest
from workflow.api import ActionItem, Branding, MenuItem, ItemGroup



from workflow.api import load_icon


def welcome_worknode_factory(workbench):
    from welcome_worknode.welcome_worknode import WelcomeWorknode

   

    node = WelcomeWorknode()
    node.window_title = 'Welcome Node'

    node.navigate_icon_normal = 'welcome.png'
    node.navigate_icon_active = 'welcome.png'  
    node.navigate_position = 0

    return node
    
    
def data_management_factory(workbench):
    from data_management_worknode.data_management_worknode import DataManagementWorknode

   

    node = DataManagementWorknode()
    node.window_title = 'Data Management'
   
    #navigate parameters
    
    node.navigate_icon_normal = 'DataManagement.png'
    node.navigate_icon_active = 'DataManagementSel.png'  
    node.navigate_position = 1

    return node



def dicomrt_view_worknode_factory(workbench):
    from dicomrt_view_worknode.dicomrt_view_worknode import DICOMRTViewWorknode

   

    node = DICOMRTViewWorknode()
    node.window_title = 'DICOMRT View'

    node.navigate_icon_normal = 'dicomrtview.png'
    node.navigate_icon_active = 'dicomrtviewsel.png'  
    node.navigate_position =2

    return node
    
    

def mcsim_worknode_factory(workbench):
    from mcsim_worknode.mcsim_worknode import MCSimWorknode

   

    node = MCSimWorknode()
    node.window_title = 'Monte Carlo Simulation'

    node.navigate_icon_normal = 'mcsim.png'
    node.navigate_icon_active = 'mcsimsel.png'  
    node.navigate_position =3

    return node


def qa_analysis_worknode_factory(workbench):
    from qa_analysis_worknode.qa_analysis_worknode import QAAnalysisWorknode
    node = QAAnalysisWorknode()
    node.window_title = 'QA Analysis'

    node.navigate_icon_normal = 'dataanalysis.png'
    node.navigate_icon_active = 'dataanalysissel.png'  
    node.navigate_position =4
    return node


enamldef CloudQAManifest(PluginManifest):
    """ The plugin manifest for the primary example plugin.

    This plugin acts as the entry point for all other plugins in this
    example. It contributes the window branding, default actions, and
    the worknode definitions.

    """
    
    id = 'cloud_qa'
    Extension:
        id = 'branding'
        point = 'enaml.workbench.workflow.branding'
        Branding:
            title = 'Cloud QA'
            icon = load_icon('cloudqaband.png')
           
    Extension:
        id = 'actions'
        point = 'enaml.workbench.workflow.actions'
        MenuItem:
            path = '/file'
            label = 'File'
            ItemGroup:
                id = 'user'
        MenuItem:
            path = '/worknode'
            label = 'worknode'
            ItemGroup:
                id = 'nodes'
        ActionItem:
            path = '/file/close'
            label = 'Close'
            shortcut = 'Ctrl+Q'
            command = 'enaml.workbench.workflow.close_window'
        ActionItem:
            path = '/worknode/first'
            label = 'First'
            shortcut = 'Ctrl+1'
            group = 'nodes'
            command = 'enaml.workbench.workflow.select_worknode'
            parameters = {'worknode': 'cloud_qa.data_management'}
        ActionItem:
            path = '/worknode/second'
            label = 'Second'
            shortcut = 'Ctrl+2'
            group = 'nodes'
            command = 'enaml.workbench.workflow.select_worknode'
            parameters = {'worknode': 'cloud_qa.sample'}
        ActionItem:
            path = '/worknode/persistent'
            label = 'Persistent'
            shortcut = 'Ctrl+3'
            group = 'nodes'
            command = 'enaml.workbench.workflow.select_worknode'
            parameters = {'worknode': 'cloud_qa.persistent'}
        ActionItem:
            path = '/worknode/close'
            label = 'Close Worknode'
            shortcut = 'Ctrl+D'
            command = 'enaml.workbench.workflow.close_worknode'
    Extension:
        id = 'welcome'
        point = 'enaml.workbench.workflow.worknodes'
        factory = welcome_worknode_factory 
    Extension:
        id = 'data_management'
        point = 'enaml.workbench.workflow.worknodes'
        factory = data_management_factory       
    Extension:
        id = 'dicomrt_view'
        point = 'enaml.workbench.workflow.worknodes'
        factory = dicomrt_view_worknode_factory
    Extension:
        id = 'montecarlosim'
        point = 'enaml.workbench.workflow.worknodes'
        factory = mcsim_worknode_factory
    Extension:
        id = 'qa_analysis'
        point = 'enaml.workbench.workflow.worknodes'
        factory = qa_analysis_worknode_factory
