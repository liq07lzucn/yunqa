# -*- coding: utf-8 -*-
"""
Created on Thu Nov 07 13:34:19 2013

@author: hqc
"""

from enaml.widgets.api import Action
from enaml.stdlib.message_box import question
from qt_clipboard import clipboard

from enaml.qt import QtGui

#---------------------------------------------------------------------------
#  Copies the current tree node object to the paste buffer:
#---------------------------------------------------------------------------

enamldef CopyAction(Action):
    """ Copies the current tree node object to the paste buffer.
    """
    attr action_context
    text = 'Copy'
    visible << action_context['copyable']
    triggered::
        clipboard.instance = action_context['data'][2]

#---------------------------------------------------------------------------
#   Cuts the current tree node object into the paste buffer:
#---------------------------------------------------------------------------

enamldef CutAction(Action):
    """ Cuts the current tree node object into the paste buffer.
    """
    attr action_context
    text = 'Cut'
    visible << action_context['cutable']
    triggered::
        widget, node, obj, nid = action_context['data']
        clipboard.instance = obj
        widget._undoable_delete(*widget._node_index(nid))

#---------------------------------------------------------------------------
#  Pastes the current contents of the paste buffer into the current node:
#---------------------------------------------------------------------------

enamldef PasteAction(Action):
    """ Pastes the current contents of the paste buffer into the current
        node.
    """
    attr action_context
    text = 'Paste'
    visible << action_context['pasteable']
    triggered::
        widget, node, obj, nid = action_context['data']
        widget._undoable_append(node, obj, clipboard.instance, False)

#---------------------------------------------------------------------------
#  Deletes the current node from the tree:
#---------------------------------------------------------------------------

enamldef DeleteAction(Action):
    """ Deletes the current node from the tree.
    """
    attr action_context
    text = 'Delete'
    visible << action_context['deletable']
    triggered::
        widget, node, obj, nid = action_context['data']
        rc = node.confirm_delete(obj)
        if rc is not False:
            if rc is not True:
                # Ask user to confirm the delete:
                label = node.get_label(obj)
                confirm = question(
                            None,
                            "Confirm Deletion",
                            "Are you sure you want to delete {}?".format(label)
                            )
                if confirm is not None and confirm.action == 'accept':
                    widget._undoable_delete( *widget._node_index( nid ) )
            else:
                widget._undoable_delete( *widget._node_index( nid ) )
            

#---------------------------------------------------------------------------
#  Renames the current tree node:
#---------------------------------------------------------------------------

enamldef RenameAction(Action):
    """ Rename the current node.
    """
    attr action_context
    text = 'Rename'
    visible << action_context['renamable']
    triggered::
        widget, node, obj, nid = action_context['data']
        tree = widget._tree
        tree.editItem(nid)

#---------------------------------------------------------------------------
#  Adds a new object to the current node :
#---------------------------------------------------------------------------

enamldef NewAction(Action):
    """ Adds a new object to the current node.
    """
    attr action_context
    attr factory
    text << mode
    attr args = ()
    attr kwargs = {}
    attr mode = 'Append'
    triggered::
        widget, node, obj, nid = action_context['data']
        new_obj = factory(*args, **kwargs)
        if new_obj:
            tree = widget._tree
            if mode == 'Append':
                widget._undoable_append(node, obj, new_obj, False)
                tree.setCurrentItem(nid.child(nid.childCount() - 1))
            if mode.startswith('Add'):
                if 'before' in mode:
                    index = widget._node_index(nid)[2]
                else:
                    index = widget._node_index(nid)[2] + 1
                parent = widget.get_parent(obj)
                parent_node = widget.get_node(parent)
                widget._undoable_insert(parent_node, parent, index,
                                        new_obj)
                parent_nid = widget._get_object_nid(parent)
                tree.setCurrentItem(parent_nid.child(index))